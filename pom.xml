<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.xj</groupId>
    <artifactId>build-package</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <!--  指定私人maven仓库地址  -->
    <!--    <repositories>-->
    <!--        <repository>-->
    <!--            <id>nexus</id>-->
    <!--            <name>Nexus Snapshot Repository</name>-->
    <!--            <url>http://192.168.13.92:8081/repository/maven-public/</url>-->
    <!--            <releases>-->
    <!--                <enabled>true</enabled>-->
    <!--            </releases>-->
    <!--            <snapshots>-->
    <!--                <enabled>false</enabled>-->
    <!--            </snapshots>-->
    <!--        </repository>-->
    <!--    </repositories>-->
    <!--    <pluginRepositories>-->
    <!--        <pluginRepository>-->
    <!--            <id>nexus</id>-->
    <!--            <name>Nexus Snapshot Repository</name>-->
    <!--            <url>http://192.168.13.92:8081/repository/maven-public/</url>-->
    <!--            <releases>-->
    <!--                <enabled>true</enabled>-->
    <!--            </releases>-->
    <!--            <snapshots>-->
    <!--                <enabled>false</enabled>-->
    <!--            </snapshots>-->
    <!--        </pluginRepository>-->
    <!--    </pluginRepositories>-->

    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
    </properties>

    <dependencies>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.23</version>
        </dependency>
    </dependencies>
    <!--  配置动态环境参数  -->
    <profiles>
        <profile>
            <id>dev</id>
            <properties>
                <profiles.active>dev</profiles.active>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>test</id>
            <properties>
                <profiles.active>test</profiles.active>
            </properties>
        </profile>
        <profile>
            <id>prod</id>
            <properties>
                <profiles.active>prod</profiles.active>
            </properties>
        </profile>
    </profiles>

    <!--  发布到指定仓库，一般为自建nexus  -->
    <!--    <distributionManagement>-->
    <!--        &lt;!&ndash;        release正式仓库则是用来保存稳定的发行版本&ndash;&gt;-->
    <!--        <repository>-->
    <!--            <id>my-deploy-release</id>-->
    <!--            <url>http://192.168.13.92:8081/repository/maven-releases/</url>-->
    <!--        </repository>-->
    <!--        &lt;!&ndash;        snapshot快照仓库用于保存开发过程中的不稳定版本 根据version的后缀-SNAPSHOT 发布到快照库，否则则发布到发行库&ndash;&gt;-->
    <!--        <snapshotRepository>-->
    <!--            <id>my-deploy-snapshot</id>-->
    <!--            <url>http://192.168.13.92:8081/repository/maven-snapshots/</url>-->
    <!--        </snapshotRepository>-->
    <!--    </distributionManagement>-->

    <build>
        <!--    指定打包文件名    -->
        <finalName>test1</finalName>
        <!--    以下是通过properties加载pom动态参数配置    -->
        <sourceDirectory>src/main/java</sourceDirectory>
        <testSourceDirectory>src/test/java</testSourceDirectory>
        <resources>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
                <excludes>
                    <exclude>**/*.java</exclude>
                </excludes>
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>src/test/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <excludes>
                    <exclude>**/*.java</exclude>
                    <exclude>**/*.class</exclude>
                </excludes>
                <filtering>true</filtering>
            </testResource>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>
        <!--    以上是通过properties加载pom动态参数配置    -->
        <plugins>
            <!--      打包插件      -->
            <!--  打包方式1：    配置打包，并配置MainClass， 但不将依赖包打包，会出现找不到依赖的异常    -->
            <!--            <plugin>-->
            <!--                <groupId>org.apache.maven.plugins</groupId>-->
            <!--                <artifactId>maven-jar-plugin</artifactId>-->
            <!--                <version>3.2.0</version>-->
            <!--                <configuration>-->
            <!--                    <archive>-->
            <!--                        <manifest>-->
            <!--                            <addClasspath>true</addClasspath>-->
            <!--                            &lt;!&ndash;   MANIFEST.MF 中 Class-Path &ndash;&gt;-->
            <!--                            <classpathPrefix>lib/</classpathPrefix>-->
            <!--                            <mainClass>com.xj.test1.T</mainClass>-->
            <!--                        </manifest>-->
            <!--                    </archive>-->
            <!--                </configuration>-->
            <!--            </plugin>-->
            <!--            &lt;!&ndash;      配置依赖包      &ndash;&gt;-->
            <!--            <plugin>-->
            <!--                <groupId>org.apache.maven.plugins</groupId>-->
            <!--                <artifactId>maven-dependency-plugin</artifactId>-->
            <!--                <version>3.1.2</version>-->
            <!--                <executions>-->
            <!--                    <execution>-->
            <!--                        <id>copy-dependencies</id>-->
            <!--                        <phase>package</phase>-->
            <!--                        <goals>-->
            <!--                            <goal>copy-dependencies</goal>-->
            <!--                        </goals>-->
            <!--                        <configuration>-->
            <!--                            &lt;!&ndash;              将依赖包打包至target下的lib目录              &ndash;&gt;-->
            <!--                            <outputDirectory>${project.build.directory}/lib</outputDirectory>-->
            <!--                        </configuration>-->
            <!--                    </execution>-->
            <!--                </executions>-->
            <!--            </plugin>-->
            <!-- 打包方式2    将所有文件打包到一个包           -->
            <!-- 会生成两个包，一个是源码包名字为 original-xxx.jar，即不包含引用的包，一个是包含引用的包 xxx.jar         -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.4</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>com.xj.test1.T</mainClass>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--    打包方式3： 一般不使用      -->
            <!-- 会生成两个包，一个是源码包，即不包含引用的包 xxx.jar，另一个是包含引用的包 名字为 xxx-jar-with-dependencies.jar          -->
            <!--            <plugin>-->
            <!--                <groupId>org.apache.maven.plugins</groupId>-->
            <!--                <artifactId>maven-assembly-plugin</artifactId>-->
            <!--                <version>3.3.0</version>-->
            <!--                <configuration>-->
            <!--                    <archive>-->
            <!--                        <manifest>-->
            <!--                            <mainClass>com.xj.test1.T</mainClass>-->
            <!--                        </manifest>-->
            <!--                    </archive>-->
            <!--                    <descriptorRefs>-->
            <!--                        <descriptorRef>jar-with-dependencies</descriptorRef>-->
            <!--                    </descriptorRefs>-->
            <!--                </configuration>-->
            <!--                &lt;!&ndash; 其中<phase>package</phase>、<goal>single</goal>即表示在执行package打包时，执行assembly:single &ndash;&gt;-->
            <!--                <executions>-->
            <!--                    <execution>-->
            <!--                        <id>make-assembly</id>-->
            <!--                        <phase>package</phase>-->
            <!--                        <goals>-->
            <!--                            <goal>single</goal>-->
            <!--                        </goals>-->
            <!--                    </execution>-->
            <!--                </executions>-->
            <!--            </plugin>-->

        </plugins>


    </build>

</project>
